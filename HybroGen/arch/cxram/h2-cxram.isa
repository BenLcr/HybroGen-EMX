# Autogenerated ISA file
# Auto generated ISA CXRAM file definition */
# Instruction format definition    ISA-2.0/csram-isa-v2.0.json 
# Instruction definition based on  ISA-2.0/csram-opcodes-v2.0.5.csv 
# CXRAM configuration defined with ISA-2.0/csram-v2.0.5.json 
# Generation date/time 2023-05-09 17:10:00.211210 
ARCH CXRAM 64
# Copy a Line into another
100000 11000000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 copy copy a0 a1 i0
# Horizontal 64-bit words swap
100000 10000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 hswap32 hswap32 a0 a1 i0
# Horizontal 128-bit words swap
100000 11000001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 2 64 hswap64 hswap64 a0 a1 i0
# Conditional copy if equal
100000 00011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyeq8 copyeq 
# Conditional copy if equal
100000 01011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyeq16 copyeq 
# Conditional copy if equal
100000 10011000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyeq32 copyeq 
# Conditional copy if superior or equal
100000 00011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygeq8 copygeq 
# Conditional copy if superior or equal
100000 01011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygeq16 copygeq 
# Conditional copy if superior or equal
100000 10011001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygeq32 copygeq 
# Conditional copy if strictly superior
100000 00011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copygt8 copygt 
# Conditional copy if strictly superior
100000 01011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copygt16 copygt 
# Conditional copy if strictly superior
100000 10011010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copygt32 copygt 
# Conditional copy if inferior or equal
100000 00011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyleq8 copyleq 
# Conditional copy if inferior or equal
100000 01011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyleq16 copyleq 
# Conditional copy if inferior or equal
100000 10011011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyleq32 copyleq 
# Conditional copy if strictly inferior
100000 00011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copylt8 copylt 
# Conditional copy if strictly inferior
100000 01011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copylt16 copylt 
# Conditional copy if strictly inferior
100000 10011100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copylt32 copylt 
# Conditional copy if unequal
100000 00011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 copyneq8 copyneq 
# Conditional copy if unequal
100000 01011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 copyneq16 copyneq 
# Conditional copy if unequal
100000 10011101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 copyneq32 copyneq 
# Broadcast 8-bit value to the whole Line
100000 00010000 a0[15:0] 00 i0[31:0]  | cxram i 16 8 bcast8 bcast  a0 i0
# Broadcast 16-bit value to the whole Line
100000 01010000 a0[15:0] 00 i0[31:0]  | cxram i 8 16 bcast16 bcast  a0 i0
# Broadcast 32-bit value to the whole Line
100000 10010000 a0[15:0] 00 i0[31:0]  | cxram i 4 32 bcast32 bcast  a0 i0
# Shift Left Logical Immediate
100000 00100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 slli8 slli a0 a1 i0
# Shift Left Logical Immediate
100000 01100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 slli16 slli a0 a1 i0
# Shift Left Logical Immediate
100000 10100000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 slli32 slli a0 a1 i0
# Shift Right Logical Immediate
100000 00100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 srli8 srli a0 a1 i0
# Shift Right Logical Immediate
100000 01100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 srli16 srli a0 a1 i0
# Shift Right Logical Immediate
100000 10100001 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 srli32 srli a0 a1 i0
# One's complement negation
100000 11100010 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 not not a0 a1 i0
# Reduce OR on the whole Line
100000 11100011 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 1 128 redor redor a0 a1 i0
# logical AND
100000 11101000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 and and 
# logical OR
100000 11101001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 or or 
# logical XOR
100000 11101010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xor xor 
# logical NAND
100000 11101011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nand nand 
# logical NOR
100000 11101100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 nor nor 
# logical XNOR
100000 11101101 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 1 128 xnor xnor 
# Arithmetic absolute value
100000 00110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 16 8 abs8 abs a0 a1 i0
# Arithmetic absolute value
100000 01110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 8 16 abs16 abs a0 a1 i0
# Arithmetic absolute value
100000 10110000 a0[15:0] 00 i0[15:0] a1[15:0]  | cxram i 4 32 abs32 abs a0 a1 i0
# Arithmetic saturated addition
100000 01001000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 adds8 adds 
# Arithmetic saturated addition
100000 10001000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 adds16 adds 
# Arithmetic saturated addition
100000 11001000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 adds32 adds 
# Arithmetic addition
100000 00111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 add8 add 
# Arithmetic addition
100000 01111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 add16 add 
# Arithmetic addition
100000 10111000 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 add32 add 
# Arithmetic subtraction
100000 00111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 sub8 sub 
# Arithmetic subtraction
100000 01111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 sub16 sub 
# Arithmetic subtraction
100000 10111001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 sub32 sub 
# Arithmetic saturated subtraction
100000 01001001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 subs8 subs 
# Arithmetic saturated subtraction
100000 10001001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 subs16 subs 
# Arithmetic saturated subtraction
100000 11001001 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 subs32 subs 
# Comparison
100000 00111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 cmp8 cmp 
# Comparison
100000 01111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 cmp16 cmp 
# Comparison
100000 10111010 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 cmp32 cmp 
# Arithmetic 8-bit integer multiply
100000 00111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 mul8 mullo 
# Arithmetic 16-bit integer multiply
100000 01111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 mul16 mullo 
# Arithmetic 32-bit integer multiply
100000 10111011 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 mul32 mullo 
# Arithmetic 8-bit integer multiply-accumulate
100000 00111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 16 8 fmac8 fmac 
# Arithmetic 16-bit integer multiply-accumulate
100000 01111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 8 16 fmac16 fmac 
# Arithmetic 32-bit integer multiply-accumulate
100000 10111100 a0[15:0] 00 a2[15:0] a1[15:0]  | cxram i 4 32 fmac32 fmac 
# End of file


# End of generated file 
